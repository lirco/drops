angular.module("drops",["envConfig","ui.router","ngResource","ui.bootstrap","ngAnimate","ngMaterial"]).config(["$resourceProvider","$stateProvider","$mdThemingProvider",function($resourceProvider,$stateProvider,$mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("blue-grey").accentPalette("orange"),$stateProvider.state("home",{templateUrl:"views/home/home.chrome.view.html",controller:"homeController",controllerAs:"homeCtrl",resolve:{notes:function(GetNotes){return GetNotes.getNotes()},activeTabDomain:function(AppState){return AppState.getActiveTabDomain()},activeTabUrl:function(AppState){return AppState.getActiveTabUrl()}}}).state("home.views",{views:{content:{templateUrl:"views/home/sub_views/home.content.chrome.view.html"},sideBar:{templateUrl:"views/home/sub_views/home.sideBar.chrome.view.html"},newNote:{templateUrl:"views/home/sub_views/home.note.chrome.view.html"},settings:{templateUrl:"views/home/sub_views/home.settings.chrome.view.html"}}}).state("newNote",{templateUrl:"views/notes/newNote.chrome.view.html",controller:"notesController",controllerAs:"notesCtrl",resolve:{activeTabUrl:function(AppState){return AppState.getActiveTabUrl()},activeTabDomain:function(AppState){return AppState.getActiveTabDomain()},activeNote:function(AppState){return AppState.getActiveNote()}}}).state("signIn",{templateUrl:"views/users/authentication/signIn.chrome.view.html",controller:"authenticationController",controllerAs:"authCtrl"}).state("signUp",{templateUrl:"views/users/authentication/signUp.chrome.view.html",controller:"authenticationController",controllerAs:"authCtrl"}).state("forgot",{templateUrl:"views/users/password/forgotPassword.chrome.view.html",controller:"passwordController",controllerAs:"passwordCtrl"}).state("passwordResetSuccess",{templateUrl:"views/users/password/passwordResetSuccess.chrome.view.html",controller:"passwordController",controllerAs:"passwordCtrl"})}]),function(){function AppState(){var self=this;return self.activeTabUrl="",self.activeTabDomain="",self.activeNote={},self.note={title:"",content:"",tags:[]},{setActiveTabUrl:function(url){self.activeTabUrl=url},getActiveTabUrl:function(){return self.activeTabUrl},setActiveTabDomain:function(domain){self.activeTabDomain=domain},getActiveTabDomain:function(){return self.activeTabDomain},setActiveNote:function(note){self.activeNote=note},getActiveNote:function(){return self.activeNote},initializeNote:function(){return self.note}}}angular.module("drops").factory("AppState",[AppState])}(),function(){function Authentication(){var self=this;return self.user=null,{setUser:function(user){self.user=user},removeUser:function(){self.user=null},getUser:function(){return self.user}}}angular.module("drops").factory("Authentication",[Authentication])}(),function(){function getNotes($q,Notes,AppState){function getNotes(){var d=$q.defer();return Notes.getNotes({domain:AppState.getActiveTabDomain()},function(response){self.notes.domainNotes=response,self.notes.urlNotes=[];for(var i=0;i<response.length;i++){var note=response[i];note.url==AppState.getActiveTabUrl()&&self.notes.urlNotes.push(note)}d.resolve(self.notes)}),d.promise}var self=this;return self.notes={domainNotes:[],urlNotes:[]},{getNotes:getNotes}}angular.module("drops").service("GetNotes",["$q","Notes","AppState",getNotes])}(),function(){function getTags(){}angular.module("drops").factory("GetTags",[getTags])}(),function(){function notesService($resource,ENV){return $resource(ENV.apiEndPoint+"/notes/:noteId",{noteId:"@_id"},{update:{method:"PUT"},getNotes:{method:"GET",isArray:!0}})}angular.module("drops").factory("Notes",["$resource","ENV",notesService])}(),function(){function TruncateFilter(){return function(input,limit){if(0>=limit)return"";if(input){var inputWords=input.split(/\s+/);inputWords.length>limit&&(input=inputWords.slice(0,limit).join(" ")+"...")}return input}}angular.module("drops").filter("truncate",TruncateFilter)}(),function(){function homeController($q,$scope,$state,Authentication,AppState,Notes,$mdDialog,notes,activeTabDomain,activeTabUrl,ENV){function querySearch(query){var deferred,results=query?self.userTags.filter(createFilterFor(query)):self.userTags;return deferred=$q.defer(),deferred.resolve(results),deferred.promise}function createFilterFor(query){var lowercaseQuery=angular.lowercase(query);return function(tag){return 0===tag.textToLower.indexOf(lowercaseQuery)}}function loadTags(){var allTags=self.authentication.user.tags;return allTags.map(function(tag){return{textToLower:tag.text.toLowerCase(),text:tag.text,color:tag.color}})}function getRandomColor(){for(var letters="0123456789ABCDEF".split(""),color="#",i=0;6>i;i++)color+=letters[Math.floor(16*Math.random())];return color}var self=this;self.authentication={},self.authentication.user=Authentication.getUser(),self.activeTabUrl=activeTabUrl,self.activeTabDomain=activeTabDomain,self.newNote=Object.create(AppState.initializeNote()),self.editMode=!1,self.domainNotes=notes.domainNotes,self.urlNotes=notes.urlNotes,self.querySearch=querySearch,self.apiEndPoint=ENV.apiEndPoint,$state.go("home.views"),self.contentToShow="content",self.setContentToShow=function(content){self.contentToShow=content},self.noteHover=function(note){return note.showHidden=!note.showHidden},self.goToPage=function(url){chrome.tabs.create({url:url})},self.goHome=function(){chrome.tabs.create({url:ENV.apiEndPoint})},self.create=function(){var newNote=new Notes({url:self.activeTabUrl,domain:self.activeTabDomain,title:self.newNote.title,content:self.newNote.content,tags:self.newNote.tags});newNote.$save(function(){self.contentToShow="content",self.domainNotes.unshift(newNote),self.urlNotes.unshift(newNote),self.newNote=Object.create(AppState.initializeNote()),$state.go("home.views")},function(errorResponse){self.error=errorResponse.data.message})},self.closeNote=function(){0==self.editMode&&(self.newNote=Object.create(AppState.initializeNote()),self.newNote.tags=[]),self.contentToShow="content",self.editMode=!1,$state.go("home.views")},self.editNote=function(note){self.editMode=!0,self.contentToShow="newNote",self.activeNote=note,self.editedNote=Object.create(note),self.editedNote.tags=note.tags,$state.go("home.views")},self.update=function(){self.editedNote.$update(function(){self.editMode=!1,self.contentToShow="content",self.domainNotes[self.domainNotes.indexOf(self.activeNote)]=self.editedNote,self.urlNotes[self.urlNotes.indexOf(self.activeNote)]=self.editedNote,$state.go("home.views")},function(errorResponse){self.error=errorResponse.data.message})},self.showDeleteDialog=function(ev,note){var confirm=$mdDialog.confirm().parent(angular.element(document.body)).title("Delete this note?").content("This note will be gone forever.").ariaLabel("Delete").ok("Delete").cancel("Keep it").targetEvent(ev);$mdDialog.show(confirm).then(function(){self.remove(note)},function(){$scope.alert="You decided to keep your note."})},self.remove=function(note){if(note){for(var i in self.domainNotes)self.domainNotes[i]===note&&self.domainNotes.splice(i,1),self.urlNotes[i]&&self.urlNotes[i]===note&&self.urlNotes.splice(i,1);note.$remove(function(){self.contentToShow="content",$state.go("home.views")})}},self.userTags=loadTags(),self.newTagAppend=function(chip){return chip.color?{text:chip.text,color:chip.color}:{text:chip,color:getRandomColor()}},self.signOut=function(){}}angular.module("drops").controller("homeController",["$q","$scope","$state","Authentication","AppState","Notes","$mdDialog","notes","activeTabDomain","activeTabUrl","ENV",homeController])}(),function(){function mainController($http,$state,Authentication,AppState,ENV){var self=this;self.authentication={},self.activeTabUrl="",chrome.tabs.query({active:!0,lastFocusedWindow:!0,currentWindow:!0},function(tabs){var domain="",uri=tabs[0].url,domainArray=uri.match(/^[\w-]+:\/*\[?([\w\.:-]+)\]?(?::\d+)?/)[1].split(".");domain=2==domainArray.length?domainArray.join("."):domainArray.splice(1).join("."),self.activeTabUrl=uri,AppState.setActiveTabUrl(uri),AppState.setActiveTabDomain(domain),$http({method:"get",url:ENV.apiEndPoint+"/chromeIndex"}).then(function(response){Authentication.setUser(response.data.user),self.authentication.user=Authentication.getUser()}).then(function(){$state.go(null!==self.authentication.user?"home":"signIn")})})}angular.module("drops").controller("mainController",["$http","$state","Authentication","AppState","ENV",mainController])}(),function(){function notesController($stateParams,$state,Authentication,Notes,$q,AppState,activeTabUrl,activeTabDomain,activeNote){var self=this;self.authentication={},self.authentication.user=Authentication.getUser(),self.activeTabUrl=activeTabUrl,self.activeTabDomain=activeTabDomain,self.activeNote=activeNote,self.create=function(){var note=new Notes({url:self.activeTabUrl,domain:self.activeTabDomain,title:self.title,content:self.content,tags:self.tags});note.$save(function(){$state.go("home"),self.title="",self.content="",self.tags=""},function(errorResponse){self.error=errorResponse.data.message})},self.update=function(){var note=activeNote;note.$update(function(){$state.go("home"),AppState.setActiveNote(null)},function(errorResponse){self.error=errorResponse.data.message})},self.getTags=function(query){var d=$q.defer(),matchingTags=self.authentication.user.tags.filter(function(tag){return-1!=tag.text.toLowerCase().indexOf(query.toLowerCase())});return d.resolve(matchingTags),d.promise}}angular.module("drops").controller("notesController",["$stateParams","$state","Authentication","Notes","$q","AppState","activeTabUrl","activeTabDomain","activeNote",notesController])}(),function(){function authenticationController(http,$state,Authentication,ENV){var self=this;self.authentication={},self.authentication.user=Authentication.getUser(),self.apiEndPoint=ENV.apiEndPoint,null!==self.authentication.user&&$state.go("home"),self.signup=function(){http.post(self.apiEndPoint+"/auth/signup",self.credentials).success(function(response){Authentication.setUser(response),self.authentication.user=Authentication.getUser(),$state.go("home")}).error(function(response){self.error=response.message})},self.signin=function(){http.post(self.apiEndPoint+"/auth/signin",self.credentials).success(function(response){Authentication.setUser(response),self.authentication.user=Authentication.getUser(),$state.go("home")}).error(function(response){self.error=response.message})},self.goToAuthProvider=function(name){chrome.tabs.create({url:self.apiEndPoint+"/auth/"+name})}}angular.module("drops").controller("authenticationController",["$http","$state","Authentication","ENV",authenticationController])}(),function(){function passwordController($stateParams,$http,$state,Authentication,ENV){var self=this;self.authentication={},self.authentication.user=Authentication.getUser(),self.apiEndPoint=ENV.apiEndPoint,null!==self.authentication.user&&$state.go("home"),self.askForPasswordReset=function(){self.success=self.error=null,$http.post(self.apiEndPoint+"/auth/forgot",self.credentials).success(function(response){self.credentials=null,self.success=response.message}).error(function(response){self.credentials=null,self.error=response.message})},self.resetUserPassword=function(){self.success=self.error=null,$http.post("/auth/reset/"+$stateParams.token,self.passwordDetails).success(function(response){self.passwordDetails=null,Authentication.setUser(response),$state.go("passwordResetSuccess")}).error(function(response){self.error=response.message})}}angular.module("drops").controller("passwordController",["$stateParams","$http","$state","Authentication","ENV",passwordController])}(),angular.module("envConfig",[]).constant("ENV",{name:"production",apiEndPoint:"https://drops-extension.herokuapp.com"});