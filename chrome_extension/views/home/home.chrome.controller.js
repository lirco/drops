'use strict';

(function () {

  function homeController($scope, $state, Authentication, AppState, Notes, $mdDialog, notes, activeTabDomain, activeTabUrl) {
    var self = this;
    self.authentication = {};
    self.authentication.user = Authentication.getUser();
    self.activeTabUrl = activeTabUrl;
    self.activeTabDomain = activeTabDomain;

    //self.viewState = viewState;
    self.domainNotes = notes.domainNotes;
    self.urlNotes = notes.urlNotes;

    $state.go('home.views');

    // initializing the content to show to be the list of notes
    self.contentToShow = "content";

    // for switching between list of notes and add a new note screen
    self.setContentToShow = function(content) {
      self.contentToShow = content;
    };

    self.noteHover = function(note) {
      return note.showHidden = !note.showHidden;
    };

    self.goToPage = function(note) {
      chrome.tabs.update({
        url: note.url
      });
    };

    self.goHome = function() {
      chrome.tabs.create({
        url: 'http://localhost:3000/'
      });
    };


    // -------------- Notes handlers ----------------
    //TODO: move these to a different controller

    self.create = function() {
      //TODO: created and updated fields are generated by Mongo middleware
      var note = new Notes({
        url: self.activeTabUrl,
        domain: self.activeTabDomain,
        title: self.note.title,
        content: self.note.content,
        tags: self.note.tags || ''
      });
      note.$save(function(response) {
        self.contentToShow = "content";
        self.domainNotes.unshift(note);
        self.urlNotes.unshift(note);
        console.log('***************************************');
        console.log(self.urlNotes);
        console.log('***************************************');
        $state.go('home.views');
        //TODO: create a service that holds the notes for current url and pull it's notes on homeCtrl
        self.note.title = '';
        self.note.content = '';
        self.note.tags = '';
      }, function(errorResponse) {
        self.error = errorResponse.data.message;
      })
    };

    self.editNote = function(note) {
      AppState.setActiveNote(note);
      $state.go('editNote')
    };

    self.showDeleteDialog = function(ev, note) {
      // Appending dialog to document.body to cover sidenav in docs app
      var confirm = $mdDialog.confirm()
        .parent(angular.element(document.body))
        .title('Delete this note?')
        .content('This note will be gone forever.')
        .ariaLabel('Delete')
        .ok('Delete')
        .cancel('Keep it')
        .targetEvent(ev);
      $mdDialog.show(confirm).then(function() {
        self.remove(note);
      }, function() {
        $scope.alert = 'You decided to keep your note.';
      });
    };

    self.remove = function(note) {
      if (note) {
        for (var i in self.domainNotes) {
          if (self.domainNotes[i] === note) {
            self.domainNotes.splice(i,1);
          }
          if (self.urlNotes[i] && self.urlNotes[i] === note) {
            self.urlNotes.splice(i,1);
          }
        }
        note.$remove(function() {
          $state.go('home.views');
        });
      }
    };

  }

  angular.module('drops')
    .controller('homeController', ['$scope','$state','Authentication','AppState','Notes', '$mdDialog', 'notes', 'activeTabDomain', 'activeTabUrl', homeController])

}());
